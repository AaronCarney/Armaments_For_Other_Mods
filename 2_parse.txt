def parse_army_files(input_directory):
    """
    Parse text files containing Stellaris army definitions.
    """
    army_data = []
    level_1_attributes = set()
    level_2_attributes = set()

    
    def parse_block(block, depth):
        data = {}
        lines = block.splitlines()
        i = 0
        while i < len(lines):
            line = lines[i].strip()
            if line.startswith("#"):
                i += 1
                continue
            if "=" in line and not line.endswith("{"):
                key, value = map(str.strip, line.split("=", 1))
                key = key.rstrip("=").strip()
                data[key] = value
                if depth == 1:
                    level_1_attributes.add(key)
            elif line.endswith("{"):
                key = line[:-1].strip().rstrip("=").strip()
                if depth == 1:
                    level_1_attributes.add(key)
                nested_block = []
                open_braces = 1
                i += 1
                while i < len(lines) and open_braces > 0:
                    nested_line = lines[i].strip()
                    if "{" in nested_line:
                        open_braces += 1
                    if "}" in nested_line:
                        open_braces -= 1
                    nested_block.append(nested_line)
                    i += 1
                nested_data = parse_block("\n".join(nested_block[:-1]), depth + 1)
                if key == "resources":
                    for sub_key in nested_data.keys():
                        level_2_attributes.add(sub_key)
                data[key] = nested_data
                continue
            i += 1
        return data

    for file_name in os.listdir(input_directory):
        if file_name.endswith(".txt"):
            with open(os.path.join(input_directory, file_name), "r", encoding="utf-8") as f:
                content = f.read()
            matches = re.finditer(r"^([a-zA-Z0-9_]+)\s*=\s*\{", content, re.MULTILINE)
            for match in matches:
                army_name = match.group(1).strip()
                start_pos = match.end()
                open_braces = 1
                end_pos = start_pos
                while open_braces > 0 and end_pos < len(content):
                    if content[end_pos] == "{":
                        open_braces += 1
                    elif content[end_pos] == "}":
                        open_braces -= 1
                    end_pos += 1
                block_content = content[start_pos:end_pos - 1]
                army_info = parse_block(block_content, 1)
                army_data.append({"name": army_name, **army_info})

    return army_data, level_1_attributes, level_2_attributes