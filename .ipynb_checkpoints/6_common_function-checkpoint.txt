def fit_pls_model(armies_df, features, target_col, n_components=2):
    """
    Fit a partial least squares regression model.
    """
    if armies_df.empty:
        raise ValueError(f"DataFrame is empty for '{target_col}'.")
    df_local = armies_df.dropna(subset=features + [target_col]).copy()
    if df_local.empty:
        raise ValueError(f"All rows dropped for '{target_col}' after dropna on {features} and target.")
    X = df_local[features].fillna(0).values
    y = df_local[target_col].values
    scaler = MinMaxScaler()
    X_scaled = scaler.fit_transform(X)
    pls = PLSRegression(n_components=n_components)
    pls.fit(X_scaled, y)
    return pls, scaler


def predict_pls(armies_df, features, pls_model, scaler):
    """
    Use the PLS model to predict cost/upkeep for armies.
    """
    X = armies_df[features].fillna(0).values
    X_scaled = scaler.transform(X)
    preds = pls_model.predict(X_scaled).ravel()
    return np.clip(preds, a_min=0, a_max=None)


def round_cost_upkeep(df_local, cost_col='cost_sr_armaments', upkeep_col='upkeep_sr_armaments'):
    """
    Round costs dynamically based on two multiples:
    - Round to the nearest LOWER_MULTIPLE if value â‰¤ UPPER_MULTIPLE.
    - Round to the nearest UPPER_MULTIPLE if value > UPPER_MULTIPLE.
    """
    # Define multiples

    def dynamic_round(value):
        if value > UPPER_MULTIPLE:
            return UPPER_MULTIPLE * round(value / UPPER_MULTIPLE)
        return LOWER_MULTIPLE * round(value / LOWER_MULTIPLE)

    if cost_col and (cost_col in df_local.columns):
        df_local[cost_col] = pd.to_numeric(df_local[cost_col], errors='coerce').fillna(0)
        df_local[cost_col] = df_local[cost_col].apply(dynamic_round)

    if upkeep_col and (upkeep_col in df_local.columns):
        df_local[upkeep_col] = pd.to_numeric(df_local[upkeep_col], errors='coerce').fillna(0)
        df_local[upkeep_col] = (np.ceil(df_local[upkeep_col] / 0.25) * 0.25).round(2)
        df_local[upkeep_col] = df_local[upkeep_col].apply(lambda x: float(x) if x == int(x) else x)

    return df_local


def round_all_cost_upkeep_columns(df):
    """
    Rounds all cost_ columns to int, and all upkeep_ columns to two decimals.
    Ensures no trailing zeros in upkeep columns if the final value is an integer.
    Also ensures 'time' is rounded to integer.
    """
    cost_cols = [c for c in df.columns if c.lower().startswith("cost_")]
    upkeep_cols = [c for c in df.columns if c.lower().startswith("upkeep_")]

    # Round cost columns to integers
    for col in cost_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
        df[col] = (df[col] // 10 * 10).astype(int)  # Ensure integer rounding in multiples of 10

    # Round upkeep columns to two decimals, then remove trailing .00
    for col in upkeep_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
        df[col] = (np.ceil(df[col] / 0.25) * 0.25).round(2)  # Round to 0.25 increments
        df[col] = df[col].apply(lambda x: int(x) if x.is_integer() else x)

    # Ensure 'time' is an integer
    if 'time' in df.columns:
        df['time'] = pd.to_numeric(df['time'], errors='coerce').fillna(0).astype(int)

    return df



def round_all_relevant_columns(df):
    """
    Round specified columns to appropriate decimal places.
    Ensures no trailing zeros in upkeep columns if the final value is an integer.
    """
    # Define rounding specifications for columns
    rounding_specs = {
        'health': 0,
        'damage': 0,
        'morale_damage': 2,
        'collateral_damage': 2,
        'war_exhaustion': 2 
    }

    # Dynamically identify upkeep columns and set rounding to 2 decimals
    upkeep_cols = [col for col in df.columns if col.lower().startswith('upkeep_')]
    for col in upkeep_cols:
        rounding_specs[col] = 2

    # Apply rounding
    for col, decimals in rounding_specs.items():
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
            df[col] = df[col].round(decimals)
            if decimals > 0:  # Remove trailing zeros if rounded value is integer
                df[col] = df[col].apply(lambda x: float(x) if x != int(x) else int(x))

    return df


def adjust_psi_costs(df, cost_col='cost_sr_armaments', upkeep_col='upkeep_sr_armaments', zro_col='cost_sr_zro'):
    """
    Adjust Psi-related armies:
    - For armies with '*psi*' or '*Psi*' in their name:
      - Reduce armament cost by PSI_ARMAMENT_COST_FACTOR (e.g., 50% reduction).
      - Add (PSI_ARMAMENT_COST_FACTOR * armament cost / PSI_DIVISOR) to the Zro cost column.
      - Reduce armament upkeep by PSI_ARMAMENT_COST_FACTOR (e.g., 50% reduction).
      - Add (PSI_ARMAMENT_COST_FACTOR * armament upkeep / PSI_DIVISOR) to the Zro upkeep column.
    """
    if zro_col not in df.columns:
        df[zro_col] = 0  # Initialize cost_sr_zro as integer column

    # Identify Psi-related armies
    psi_mask = df['name'].str.contains(r'psi', case=False, na=False)

    # Adjust Armament Cost (integer-based)
    psi_cost_reduction = (df.loc[psi_mask, cost_col] * PSI_ARMAMENT_COST_FACTOR).round().astype(int)
    df.loc[psi_mask, cost_col] -= psi_cost_reduction
    df.loc[psi_mask, zro_col] += (psi_cost_reduction / PSI_DIVISOR).round().astype(int)

    # Adjust Upkeep (float-based)
    psi_upkeep_reduction = (df.loc[psi_mask, upkeep_col] * PSI_ARMAMENT_COST_FACTOR).round(2)
    df.loc[psi_mask, upkeep_col] -= psi_upkeep_reduction
    df.loc[psi_mask, upkeep_col] += ((psi_upkeep_reduction) / PSI_DIVISOR).round(2)

    return df