dampening_config = {
    'cost_sr_armaments':  {'threshold_factor': COST_THRESHOLD_FACTOR, 'exponent_factor': COST_EXPONENT_FACTOR},
    'upkeep_sr_armaments': {'threshold_factor': UPKEEP_THRESHOLD_FACTOR, 'exponent_factor': UPKEEP_EXPONENT_FACTOR},
}

def apply_dampening(df, armament_df):
    """
    Exponential dampening of cost_sr_armaments and upkeep_sr_armaments columns,
    referencing the peak from 'armament_df'.
    """
    debug_info = {}

    # Dampening for cost_sr_armaments
    if 'cost_sr_armaments' in df.columns:
        peak_cost = armament_df['cost_sr_armaments'].max()
        if pd.notnull(peak_cost) and peak_cost > 0:
            cost_settings = dampening_config['cost_sr_armaments']
            cost_threshold_value = cost_settings['threshold_factor'] * peak_cost
            cost_exponent_factor = cost_settings['exponent_factor']

            def dampen_cost(x):
                if x <= cost_threshold_value:
                    return x
                diff = x - cost_threshold_value
                return cost_threshold_value + diff / (1 + cost_exponent_factor * diff)

            df['cost_sr_armaments'] = df['cost_sr_armaments'].apply(dampen_cost)

    # Dampening for upkeep_sr_armaments
    if 'upkeep_sr_armaments' in df.columns:
        peak_upkeep = armament_df['upkeep_sr_armaments'].max()
        if pd.notnull(peak_upkeep) and peak_upkeep > 0:
            upkeep_settings = dampening_config['upkeep_sr_armaments']
            upkeep_threshold_value = upkeep_settings['threshold_factor'] * peak_upkeep
            upkeep_exponent_factor = upkeep_settings['exponent_factor']

            def dampen_upkeep(x):
                if x <= upkeep_threshold_value:
                    return x
                diff = x - upkeep_threshold_value
                return upkeep_threshold_value + diff / (1 + upkeep_exponent_factor * diff)

            df['upkeep_sr_armaments'] = df['upkeep_sr_armaments'].apply(dampen_upkeep)

    return df